export const runtime = "nodejs"

import nodemailer from "nodemailer"
import { NextResponse } from "next/server"

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { name, phone, email, discType, manufacturer, series, model, comment } = body

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!name || !phone) {
      return NextResponse.json({ success: false, message: "–Ü–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è" }, { status: 400 })
    }

    console.log("Environment variables check:", {
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      user: process.env.SMTP_USER ? "SET" : "NOT SET",
      pass: process.env.SMTP_PASS ? "SET" : "NOT SET",
      from: process.env.SMTP_FROM,
      to: process.env.SMTP_TO,
    })

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è transporter
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number.parseInt(process.env.SMTP_PORT || "587"),
      secure: false, // true –¥–ª—è –ø–æ—Ä—Ç—É 465, false –¥–ª—è 587
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    })

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    await transporter.verify()
    console.log("SMTP connection verified successfully")

    // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    const getDiscTypeText = (type: string) => {
      const types: { [key: string]: string } = {
        doubling: "–°–∏—Å—Ç–µ–º–∞ –∑–¥–≤–æ—é–≤–∞–Ω–Ω—è —à–∏—Ä–æ–∫—ñ –¥–∏—Å–∫–∏",
        interrow: "–î–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –º—ñ–∂—Ä—è–¥–¥—ñ",
        custom: "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç",
      }
      return types[type] || type
    }

    const getManufacturerName = (id: string) => {
      const names: { [key: string]: string } = {
        "john-deere": "John Deere",
        "case-ih": "Case IH",
        "massey-ferguson": "Massey Ferguson",
        kubota: "Kubota",
        "new-holland": "New Holland",
        fendt: "Fendt",
        claas: "CLAAS",
        mahindra: "Mahindra & Mahindra",
        "deutz-fahr": "Deutz-Fahr",
        landini: "Landini",
      }
      return names[id] || id
    }

    // HTML —à–∞–±–ª–æ–Ω
    const htmlContent = `
      <h2>üöú –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –∑ —Å–∞–π—Ç—É</h2>
      <div style="font-family: Arial, sans-serif; max-width: 600px;">
        
        <div style="background: #f0f9ff; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3 style="color: #0369a1; margin-top: 0;">üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
          <p><strong>–Ü–º'—è:</strong> ${name}</p>
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
          ${email ? `<p><strong>Email:</strong> ${email}</p>` : ""}
        </div>

        <div style="background: #f0fdf4; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3 style="color: #166534; margin-top: 0;">üîß –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
          <p><strong>–¢–∏–ø –¥–∏—Å–∫—ñ–≤:</strong> ${getDiscTypeText(discType)}</p>
          <p><strong>–í–∏—Ä–æ–±–Ω–∏–∫ —Ç—Ä–∞–∫—Ç–æ—Ä–∞:</strong> ${getManufacturerName(manufacturer)}</p>
          <p><strong>–°–µ—Ä—ñ—è:</strong> ${series}</p>
          <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${model === "custom" ? "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç (—É—Ç–æ—á–Ω–∏—Ç–∏ —É –∫–ª—ñ—î–Ω—Ç–∞)" : model}</p>
        </div>

        ${
          comment
            ? `
        <div style="background: #fefce8; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3 style="color: #a16207; margin-top: 0;">üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞</h3>
          <p>${comment}</p>
        </div>
        `
            : ""
        }

        <div style="background: #fee2e2; padding: 15px; border-radius: 8px; margin: 15px 0; text-align: center;">
          <h3 style="color: #dc2626; margin-top: 0;">‚ö° –¢–ï–†–ú–Ü–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</h3>
          <p style="color: #dc2626; font-weight: bold;">–ó–ê–¢–ï–õ–ï–§–û–ù–£–ô–¢–ï –ö–õ–Ü–Ñ–ù–¢–£ –Ø–ö–ù–ê–ô–®–í–ò–î–®–ï!</p>
        </div>

        <hr style="margin: 20px 0;">
        <p><small>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("uk-UA")}</small></p>
        <p><small>–î–∂–µ—Ä–µ–ª–æ: –°–∞–π—Ç TWINFORCE WHEELS</small></p>
      </div>
    `

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
    const info = await transporter.sendMail({
      from: process.env.SMTP_FROM, // –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫
      to: process.env.SMTP_TO, // –æ—Ç—Ä–∏–º—É–≤–∞—á - –°–µ—Ä–≥—ñ–π –ö–æ—Å—Ç—Ä–æ–≤
      replyTo: email || undefined, // –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ–¥–µ –Ω–∞ email –∫–ª—ñ—î–Ω—Ç–∞ (—è–∫—â–æ —î)
      subject: `üöú –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –≤—ñ–¥ ${name}`,
      html: htmlContent,
    })

    console.log("Email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:", info.messageId)
    console.log("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑:", process.env.SMTP_FROM)
    console.log("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:", process.env.SMTP_TO)

    return NextResponse.json({
      success: true,
      message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
      messageId: info.messageId,
    })
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email:", error)

    return NextResponse.json(
      {
        success: false,
        message: "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
        error: process.env.NODE_ENV === "development" ? (error as Error).message : undefined,
      },
      { status: 500 },
    )
  }
}
