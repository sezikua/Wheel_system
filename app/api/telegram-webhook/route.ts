import { NextResponse } from "next/server";

function getDiscTypeText(type: string) {
  const types: Record<string, string> = {
    doubling: "–°–∏—Å—Ç–µ–º–∞ –∑–¥–≤–æ—é–≤–∞–Ω–Ω—è —à–∏—Ä–æ–∫—ñ –¥–∏—Å–∫–∏",
    interrow: "–î–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –º—ñ–∂—Ä—è–¥–¥—ñ",
    custom: "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç",
  };
  return types[type] || type;
}

function getManufacturerName(id: string) {
  const names: Record<string, string> = {
    "john-deere": "John Deere",
    "case-ih": "Case IH",
    "massey-ferguson": "Massey Ferguson",
    kubota: "Kubota",
    "new-holland": "New Holland",
    fendt: "Fendt",
    claas: "CLAAS",
    mahindra: "Mahindra & Mahindra",
    "deutz-fahr": "Deutz-Fahr",
    landini: "Landini",
  };
  return names[id] || id;
}

export const runtime = "nodejs";

export async function POST(request: Request) {
  try {
    const body = await request.json();

    const { name, phone, email, discType, manufacturer, series, model, comment } = body;

    if (!name || !phone || !discType || !manufacturer || !series || !model) {
      return NextResponse.json(
        { success: false, message: "–ù–µ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ" },
        { status: 400 }
      );
    }

    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID;

    if (!telegramBotToken || !telegramChatId) {
      return NextResponse.json(
        {
          success: false,
          message: "Telegram —Ç–æ–∫–µ–Ω –∞–±–æ chat_id –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ",
        },
        { status: 500 }
      );
    }

    const telegramMessage = `
üîî *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤*

üë§ *–Ü–º'—è:* ${name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
${email ? `üìß *Email:* ${email}` : ""}

---
üîß *–¢–∏–ø –¥–∏—Å–∫—ñ–≤:* ${getDiscTypeText(discType)}
üöú *–¢—Ä–∞–∫—Ç–æ—Ä:* ${getManufacturerName(manufacturer)} / –°–µ—Ä—ñ—è: ${series} / –ú–æ–¥–µ–ª—å: ${model === "custom" ? "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç" : model}
${comment ? `üí¨ *–ö–æ–º–µ–Ω—Ç–∞—Ä:* ${comment}` : ""}

üïí ${new Date().toLocaleString("uk-UA", { timeZone: "Europe/Kyiv" })}
    `.trim();

    const telegramUrl = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`;

    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: telegramMessage,
        parse_mode: "Markdown",
      }),
    });

    const telegramData = await telegramResponse.json();

    if (!telegramResponse.ok) {
      console.error("Telegram API Error:", telegramData);
      return NextResponse.json(
        { success: false, message: "–ü–æ–º–∏–ª–∫–∞ Telegram API", error: telegramData.description },
        { status: 502 }
      );
    }

    return NextResponse.json({ success: true, message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram!" });
  } catch (error) {
    console.error("Telegram Webhook Error:", error);
    return NextResponse.json(
      {
        success: false,
        message: "–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞",
        error: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json(
    { success: false, message: "–ú–µ—Ç–æ–¥ GET –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ POST." },
    { status: 405 }
  );
}
