export const runtime = "nodejs"

import { NextResponse } from "next/server"

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ —Å—é–¥–∏, –æ—Å–∫—ñ–ª—å–∫–∏ lib/order-handler.ts –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ)
function getDiscTypeText(type: string) {
  const types: { [key: string]: string } = {
    doubling: "–°–∏—Å—Ç–µ–º–∞ –∑–¥–≤–æ—é–≤–∞–Ω–Ω—è —à–∏—Ä–æ–∫—ñ –¥–∏—Å–∫–∏",
    interrow: "–î–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –º—ñ–∂—Ä—è–¥–¥—ñ",
    custom: "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç",
  }
  return types[type] || type
}

function getManufacturerName(id: string) {
  const names: { [key: string]: string } = {
    "john-deere": "John Deere",
    "case-ih": "Case IH",
    "massey-ferguson": "Massey Ferguson",
    kubota: "Kubota",
    "new-holland": "New Holland",
    fendt: "Fendt",
    claas: "CLAAS",
    mahindra: "Mahindra & Mahindra",
    "deutz-fahr": "Deutz-Fahr",
    landini: "Landini",
  }
  return names[id] || id
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { name, phone, email, discType, manufacturer, series, model, comment } = body

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!name || !phone || !discType || !manufacturer || !series || !model) {
      return NextResponse.json({ success: false, message: "–ù–µ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ" }, { status: 400 })
    }

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
    const telegramMessage = `
üîî *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –∑ —Å–∞–π—Ç—É*

üë§ *–Ü–º'—è:* ${name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
${email ? `üìß *Email:* ${email}` : ""}

---
üîß *–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*
*–¢–∏–ø –¥–∏—Å–∫—ñ–≤:* ${getDiscTypeText(discType)}
*–í–∏—Ä–æ–±–Ω–∏–∫ —Ç—Ä–∞–∫—Ç–æ—Ä–∞:* ${getManufacturerName(manufacturer)}
*–°–µ—Ä—ñ—è:* ${series}
*–ú–æ–¥–µ–ª—å:* ${model === "custom" ? "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç (—É—Ç–æ—á–Ω–∏—Ç–∏ —É –∫–ª—ñ—î–Ω—Ç–∞)" : model}
${comment ? `üí¨ *–ö–æ–º–µ–Ω—Ç–∞—Ä:* ${comment}` : ""}

---
‚è∞ *–ß–∞—Å:* ${new Date().toLocaleString("uk-UA", { timeZone: "Europe/Kiev" })}
    `.trim()

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`

    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: "Markdown",
      }),
    })

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.json()
      throw new Error(`Telegram API error: ${errorData.description || JSON.stringify(errorData)}`)
    }

    return NextResponse.json({
      success: true,
      message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!",
    })
  } catch (error) {
    console.error("Telegram webhook error:", error)
    return NextResponse.json(
      {
        success: false,
        message: "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
