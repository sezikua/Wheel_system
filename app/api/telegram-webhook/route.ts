import { NextResponse } from "next/server";

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
function getDiscTypeText(type: string) {
  const types: { [key: string]: string } = {
    doubling: "–°–∏—Å—Ç–µ–º–∞ –∑–¥–≤–æ—é–≤–∞–Ω–Ω—è —à–∏—Ä–æ–∫—ñ –¥–∏—Å–∫–∏",
    interrow: "–î–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –º—ñ–∂—Ä—è–¥–¥—ñ",
    custom: "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç",
  };
  return types[type] || type;
}

function getManufacturerName(id: string) {
  const names: { [key: string]: string } = {
    "john-deere": "John Deere",
    "case-ih": "Case IH",
    "massey-ferguson": "Massey Ferguson",
    kubota: "Kubota",
    "new-holland": "New Holland",
    fendt: "Fendt",
    claas: "CLAAS",
    mahindra: "Mahindra & Mahindra",
    "deutz-fahr": "Deutz-Fahr",
    landini: "Landini",
  };
  return names[id] || id;
}

export const runtime = "nodejs";

export async function POST(request: Request) {
  try {
    console.log("--- Webhook: –û—Ç—Ä–∏–º–∞–Ω–æ POST –∑–∞–ø–∏—Ç –¥–æ /api/telegram-webhook ---");

    const body = await request.json();
    const { name, phone, email, discType, manufacturer, series, model, comment } = body;

    console.log("Webhook: –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É:", {
      name, phone, email, discType, manufacturer, series, model, comment
    });

    if (!name || !phone || !discType || !manufacturer || !series || !model) {
      console.error("Webhook: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ - –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.");
      return NextResponse.json({ success: false, message: "–ù–µ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ" }, { status: 400 });
    }

    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID;

    if (!telegramBotToken || !telegramChatId) {
      console.error("Webhook: TELEGRAM_BOT_TOKEN –∞–±–æ TELEGRAM_CHAT_ID –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ Vercel!");
      return NextResponse.json({ success: false, message: "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram –±–æ—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ." }, { status: 500 });
    }

    const telegramMessage = `
üîî *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –∑ —Å–∞–π—Ç—É*

üë§ *–Ü–º'—è:* ${name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
${email ? `üìß *Email:* ${email}` : ""}

---
üîß *–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*
*–¢–∏–ø –¥–∏—Å–∫—ñ–≤:* ${getDiscTypeText(discType)}
*–í–∏—Ä–æ–±–Ω–∏–∫ —Ç—Ä–∞–∫—Ç–æ—Ä–∞:* ${getManufacturerName(manufacturer)}
*–°–µ—Ä—ñ—è:* ${series}
*–ú–æ–¥–µ–ª—å:* ${model === "custom" ? "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç (—É—Ç–æ—á–Ω–∏—Ç–∏ —É –∫–ª—ñ—î–Ω—Ç–∞)" : model}
${comment ? `üí¨ *–ö–æ–º–µ–Ω—Ç–∞—Ä:* ${comment}` : ""}

---
‚è∞ *–ß–∞—Å:* ${new Date().toLocaleString("uk-UA", { timeZone: "Europe/Kiev" })}
    `.trim();

    console.log("Webhook: –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram:", telegramMessage);
    console.log("Webhook: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ Telegram API URL:", `https://api.telegram.org/bot${telegramBotToken}/sendMessage`);

    const telegramUrl = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`;
    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: telegramMessage,
        parse_mode: "Markdown",
      }),
    });

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.json();
      console.error("Webhook: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Telegram API:", telegramResponse.status, errorData);
      throw new Error(`Telegram API error: ${errorData.description || JSON.stringify(errorData)}`);
    }

    const successData = await telegramResponse.json();
    console.log("Webhook: –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Telegram API:", successData);

    console.log("--- Webhook: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram! ---");
    return NextResponse.json({
      success: true,
      message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!",
    });

  } catch (error) {
    console.error("--- Webhook: –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /api/telegram-webhook ---");
    console.error("Webhook: –ü–æ–º–∏–ª–∫–∞:", error);

    return NextResponse.json(
      {
        success: false,
        message: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –≤ Telegram Webhook",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    );
  }
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è GET-–∑–∞–ø–∏—Ç—ñ–≤, —â–æ–± –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞–≤ JSON,
// –∞ –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É Vercel. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É.
export async function GET() {
  console.log("Webhook: –û—Ç—Ä–∏–º–∞–Ω–æ GET –∑–∞–ø–∏—Ç –¥–æ /api/telegram-webhook. –ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π.");
  return NextResponse.json(
    { success: false, message: "–ú–µ—Ç–æ–¥ GET –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ API —Ä–æ—É—Ç—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ POST." },
    { status: 405 }
  );
}
