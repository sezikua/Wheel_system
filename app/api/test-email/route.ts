export const runtime = "nodejs"

import nodemailer from "nodemailer"
import { type NextRequest, NextResponse } from "next/server"
import { sendEmail, generateOrderEmailHTML } from "@/lib/email"

export async function POST(request: NextRequest) {
  try {
    const { action, orderData } = await request.json()

    if (action === "test-connection") {
      console.log("Testing SMTP connection...")

      const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: Number.parseInt(process.env.SMTP_PORT || "587"),
        secure: false,
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
      })

      const result = await transporter.verify()
      console.log("SMTP connection test result:", result)
      return NextResponse.json({ success: true, message: "Connection successful", result })
    }

    if (action === "send-test") {
      console.log("Sending simple test email...")
      const result = await sendEmail({
        to: process.env.SMTP_TO || "s.kostrov@agrosolar.com.ua", // —Ç–µ—Å—Ç—É—î–º–æ –Ω–∞ –ø–æ—à—Ç—É –°–µ—Ä–≥—ñ—è
        subject: "–¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email",
        html: `
          <h1>–¢–µ—Å—Ç–æ–≤–∏–π –ª–∏—Å—Ç</h1>
          <p>–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –ª–∏—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SMTP.</p>
          <p>–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString("uk-UA")}</p>
          <p>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑: ${process.env.SMTP_FROM}</p>
          <p>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${process.env.SMTP_TO}</p>
        `,
      })
      return NextResponse.json(result)
    }

    if (action === "send-order") {
      console.log("Sending test order email...")
      const emailHTML = generateOrderEmailHTML(orderData)
      const result = await sendEmail({
        to: process.env.SMTP_TO || "s.kostrov@agrosolar.com.ua", // —Ç–µ—Å—Ç—É—î–º–æ –Ω–∞ –ø–æ—à—Ç—É –°–µ—Ä–≥—ñ—è
        subject: `üöú –¢–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –≤—ñ–¥ ${orderData.name}`,
        html: emailHTML,
      })
      return NextResponse.json(result)
    }

    return NextResponse.json({ success: false, error: "Invalid action" })
  } catch (error) {
    console.error("API error:", error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
      details: error,
    })
  }
}
