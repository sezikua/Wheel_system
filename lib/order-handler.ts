import { sendEmail, generateOrderEmailHTML } from "./email"

// –¢–∏–ø–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export type OrderData = {
  name: string
  phone: string
  email?: string
  discType: string
  manufacturer: string
  series: string
  model: string
  comment?: string
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export function logOrder(orderData: OrderData) {
  console.log("=== –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ===")
  console.log("–Ü–º'—è:", orderData.name)
  console.log("–¢–µ–ª–µ—Ñ–æ–Ω:", orderData.phone)
  console.log("Email:", orderData.email || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
  console.log("–¢–∏–ø –¥–∏—Å–∫—ñ–≤:", orderData.discType)
  console.log("–í–∏—Ä–æ–±–Ω–∏–∫:", orderData.manufacturer)
  console.log("–°–µ—Ä—ñ—è:", orderData.series)
  console.log("–ú–æ–¥–µ–ª—å:", orderData.model)
  console.log("–ö–æ–º–µ–Ω—Ç–∞—Ä:", orderData.comment || "–Ω–µ–º–∞—î")
  console.log("–î–∞—Ç–∞:", new Date().toLocaleString("uk-UA"))
  console.log("========================")
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é email
export async function processOrder(orderData: OrderData) {
  try {
    // –õ–æ–≥—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    logOrder(orderData)

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –Ω–∞ –ø–æ—à—Ç—É –°–µ—Ä–≥—ñ—è –ö–æ—Å—Ç—Ä–æ–≤–∞
    console.log("Sending email notification...")
    const emailHTML = generateOrderEmailHTML(orderData)

    const emailResult = await sendEmail({
      to: process.env.SMTP_TO || "s.kostrov@agrosolar.com.ua", // –æ—Ç—Ä–∏–º—É–≤–∞—á - –°–µ—Ä–≥—ñ–π –ö–æ—Å—Ç—Ä–æ–≤
      subject: `üöú –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –≤—ñ–¥ ${orderData.name}`,
      html: emailHTML,
    })

    if (emailResult.success) {
      console.log("Email notification sent successfully:", emailResult.messageId)
    } else {
      console.error("Email notification failed:", emailResult.error)
    }

    return {
      success: true,
      message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ",
      emailSent: emailResult.success,
      emailError: emailResult.success ? undefined : emailResult.error,
    }
  } catch (error) {
    console.error("Order processing error:", error)
    return {
      success: false,
      error: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
    }
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
export function getDiscTypeText(type: string) {
  const types: { [key: string]: string } = {
    doubling: "–°–∏—Å—Ç–µ–º–∞ –∑–¥–≤–æ—é–≤–∞–Ω–Ω—è —à–∏—Ä–æ–∫—ñ –¥–∏—Å–∫–∏",
    interrow: "–î–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –º—ñ–∂—Ä—è–¥–¥—ñ",
    custom: "–°–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç",
  }
  return types[type] || type
}

export function getManufacturerName(id: string) {
  const names: { [key: string]: string } = {
    "john-deere": "John Deere",
    "case-ih": "Case IH",
    "massey-ferguson": "Massey Ferguson",
    kubota: "Kubota",
    "new-holland": "New Holland",
    fendt: "Fendt",
    claas: "CLAAS",
    mahindra: "Mahindra & Mahindra",
    "deutz-fahr": "Deutz-Fahr",
    landini: "Landini",
  }
  return names[id] || id
}
